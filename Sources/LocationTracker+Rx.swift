//
//  LocationTracker+Rx.swift
//  RxLocationServices
//
//  Created by Anton Bronnikov on 14/09/2016.
//  Copyright © 2016 Anton Bronnikov. All rights reserved.
//

import CoreLocation
import RxSwift

public extension LocationTracker {

    public struct Rx {

        // MARK: - Public API

        /// Reactive stream of the retrieved user locations.

        public let location: Observable<CLLocation>

        /// Reactive stream of the errors either sent by the location services (of `NSError` type
        /// with `domain` == `kCLErrorDomain`) or internally generated by the `LocationTracker`
        /// (of `LocationTracker.Failure` type).

        public let error: Observable<Error>

        /// Reactive stream of paused/resumed state of the location updates delivery.
        ///
        /// When the location manager detects that the device’s location is not changing, it can 
        /// pause the delivery of updates in order to shut down the appropriate hardware and save 
        /// power.
        ///
        /// - seealso:
        ///   - [CLLocationManager.locationManagerDidPauseLocationUpdates(_:)](apple-reference-documentation://hsbKLYxMg0)
        ///   - [CLLocationManager.locationManagerDidResumeLocationUpdates(_:)](apple-reference-documentation://hsRKsf1ayS)

        public let paused: Observable<Bool>

        /// Reactive stream of deferring state of the location updates.
        ///
        /// If your app is in the background and the system is able to optimize its power usage, the 
        /// location manager tells the GPS hardware to store new locations internally until the 
        /// specified distance or timeout conditions are met.
        ///
        /// - seealso:
        ///   - [CLLocationManager.allowDeferredLocationUpdates(untilTraveled:timeout:)](apple-reference-documentation://hs64cDNHc7)

        public let deferring: Observable<Bool>

        // MARK: - Internal API

        static let empty = Rx()

        private init() {
            location = Observable.empty()
            error = Observable.empty()
            paused = Observable.empty()
            deferring = Observable.empty()
        }

        init(location: Observable<CLLocation>, error: Observable<Error>, paused: Observable<Bool>, deferring: Observable<Bool>) {
            self.location = location
            self.error = error
            self.paused = paused
            self.deferring = deferring
        }

    }

}
